version: '3'

dotenv:
  - .env

vars:
  DESIGN: github.com/danielmichaels/tawny/design
  DATABASE_TYPE: "sqlite"
  DATABASE_URL: "./data/data.sql"

  MP_NAME: tawny
  MP_IP: $(multipass info {{.MP_NAME}} --format json| jq -r '.info.{{.MP_NAME}}.ipv4[0]')

tasks:
  default:
    cmds:
      - task --list-all
    silent: true

  dev:
    desc: Run server
    cmds:
      - air -- --console {{.CLI_ARGS}}

  k3s:up:
    desc: Create a local k3s server
    cmds:
      - curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE="644" INSTALL_K3S_EXEC="--disable traefik" sh -
      - arkade install traefik2 --dashboard --wait
      - arkade install cert-manager --wait


  tidy:
    desc: go mod tidy
    cmds:
      - go mod tidy

  gen:
    desc: goa gen
    cmds:
      - goa gen {{.DESIGN}} {{.CLI_ARGS}}

  example:
    desc: goa example
    cmds:
      - goa example {{.DESIGN}} {{.CLI_ARGS}}

  clean:
    desc: remove autogenerated code
    cmds:
      - rm -rf cmd/backend-cli gen/ goa*

  autoregen:
    desc: run 'goa gen' on file change in design/
    cmds:
      - fd . design | entr task gen

  templgen:
    desc: run 'templ generate'
    cmds:
      - templ fmt .
      - templ generate

  templautogen:
    desc: run 'templ generate' when a .templ file changes
    cmds:
      - fd . 'assets/view' | entr task templgen

  sqlc:
    desc: Generate models using sqlc
    env:
      CGO_ENABLED: 1
    dir: sql
    cmds:
      - env | ag -i cgo
      - sqlc generate

  db:migration:up:
    desc: Run migrations (all of them)
    cmds:
      - goose -dir ./assets/migrations {{.DATABASE_TYPE}} {{.DATABASE_URL}} up

  db:migration:down:
    desc: Drop all migrations
    cmds:
      - goose -dir ./assets/migrations {{.DATABASE_TYPE}} {{.DATABASE_URL}} down

  db:migration:down:to:
    desc: Run migrations back to a specific version
    summary: |
      Rollback to a specific version of the local migrations. Must provide the version
      as an argument.
      Example,
      task db:migration:down:to -- 0001
    cmds:
      - goose -dir ./assets/migrations {{.DATABASE_TYPE}} {{.DATABASE_URL}} down-to {{.CLI_ARGS}}

  db:migration:create:
    desc: Create a new migration. The migration name is the value after --
    summary: |
      Create a new migrations file using the following syntax
      task db:migration:create -- my-new-migration
    cmds:
      - goose -dir ./assets/migrations {{.DATABASE_TYPE}} {{.DATABASE_URL}} create {{.CLI_ARGS}} sql
      - goose -dir ./assets/migrations {{.DATABASE_TYPE}} {{.DATABASE_URL}} fix

  db:migration:redo:
    desc: Rollback the latest migration, the reapply
    cmds:
      - goose -dir ./assets/migrations {{.DATABASE_TYPE}} {{.DATABASE_URL}} redo

  db:migration:status:
    desc: Get the migration status of the local database
    summary: |
      Example usage
      task db:migration:status
    cmds:
      - goose -dir ./assets/migrations {{.DATABASE_TYPE}} {{.DATABASE_URL}} status

  db:testpsql:
    desc: Drop into the test PG instance
    cmds:
      - docker exec -it {{.TEST_DB_CONTAINER_NAME}} psql {{.DATABASE_URL}}

  db:up:
    desc: Bring up the development server database container
    cmds:
      - docker compose up -d
      - docker compose logs -f

  test:
    desc: Run all tests
    cmds:
      - go test -race -v -cover ./...

  pnpm:
    desc: Install javascript dependencies
    cmds:
      - pnpm install

  tailwind:
    desc: Install tailwind dependencies
    cmds:
      - pnpm run tailwind

  audit:
    desc: Run linters and betteralign
    cmds:
      - betteralign -apply ./...
      - golangci-lint run ./... {{.CLI_ARGS}}

  alpine:
    desc: Install Alpine.js dependencies
    cmds:
      - pnpm run alpine

  assets:
    desc: Run all javascript related tasks in one go
    cmds:
      - task: pnpm
      - task: tailwind
      - task: alpine

  watchassets:
    desc: Watch assets and re-build on change
    cmds:
      - fd . assets | entr task assets

  golines:
    desc: run golines . -w
    cmds:
      - golines . -w

  mp:cloud-config:
    desc: Launch a Multipass VM with SSH access
    cmds:
      - |
        sed "s,ssh-rsa.*,$(cat $HOME/.ssh/id_rsa.pub),g" scripts/cloud-config.txt | \
        multipass launch --name {{.MP_NAME}} --cpus 2 --memory 2G --cloud-init -
      - multipass info {{.MP_NAME}}
  mp:ssh:
    desc: SSH into the local Multipass VM
    cmds:
      - set -x
      - ssh ubuntu@{{.MP_IP}} {{.CLI_ARGS}}
  mp:scp-install:
    desc: SCP the installer over for testing
    cmds:
      - set -x
      - scp ./scripts/install "ubuntu@{{.MP_IP}}:/tmp"
