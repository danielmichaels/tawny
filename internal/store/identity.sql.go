// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: identity.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUsers = `-- name: CountUsers :one
SELECT count(*) OVER ()
FROM users u
         JOIN team_user tu ON u.uuid = tu.user_id
WHERE tu.team_id IN (SELECT team_id
                     FROM team_user
                     WHERE user_id = (SELECT tokenable_id
                                      FROM personal_access_tokens
                                      WHERE token = $1))
`

// Count all users the authorized user can see; used in pagination
func (q *Queries) CountUsers(ctx context.Context, token string) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers, token)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTeam = `-- name: CreateTeam :one
SELECT create_team
FROM create_team($1, $2, $3)
`

type CreateTeamParams struct {
	TeamName      string `json:"team_name"`
	TeamEmail     string `json:"team_email"`
	CurrentUserID string `json:"current_user_id"`
}

// Create a team; leverages 'create_team' function which when supplied
// name, email, and user_id will either create a team or error on permissions
func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (interface{}, error) {
	row := q.db.QueryRow(ctx, createTeam, arg.TeamName, arg.TeamEmail, arg.CurrentUserID)
	var create_team interface{}
	err := row.Scan(&create_team)
	return create_team, err
}

const createUserWithNewTeam = `-- name: CreateUserWithNewTeam :one
WITH new_team AS (
    INSERT INTO teams (name, personal_team)
        VALUES (COALESCE($1 || '_team', 'default_team'), true)
        RETURNING uuid, id),
     new_user AS (
         INSERT INTO users (name, email, password, current_team_id)
             VALUES ($2, $3, $4, (SELECT id FROM new_team))
             RETURNING uuid),
     new_user_team AS (
         INSERT INTO team_user (team_id, user_id, role)
             SELECT new_team.uuid, new_user.uuid, 'maintainer'
             FROM new_team,
                  new_user
             RETURNING user_id, team_id),
     new_token AS (
         INSERT INTO personal_access_tokens (tokenable_type, tokenable_id, name, token)
             SELECT 'user', new_user.uuid, 'default', ('key_' || generate_uid(12))
             FROM new_user
             RETURNING token)
SELECT new_user.uuid AS user_id, new_team.uuid AS team_id, new_token.token AS personal_access_token
FROM new_user,
     new_team,
     new_token
`

type CreateUserWithNewTeamParams struct {
	Column1  pgtype.Text `json:"column_1"`
	Name     pgtype.Text `json:"name"`
	Email    pgtype.Text `json:"email"`
	Password pgtype.Text `json:"password"`
}

type CreateUserWithNewTeamRow struct {
	UserID              string `json:"user_id"`
	TeamID              string `json:"team_id"`
	PersonalAccessToken string `json:"personal_access_token"`
}

// Create a new user and a team for them
func (q *Queries) CreateUserWithNewTeam(ctx context.Context, arg CreateUserWithNewTeamParams) (CreateUserWithNewTeamRow, error) {
	row := q.db.QueryRow(ctx, createUserWithNewTeam,
		arg.Column1,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i CreateUserWithNewTeamRow
	err := row.Scan(&i.UserID, &i.TeamID, &i.PersonalAccessToken)
	return i, err
}

const doesAdminExist = `-- name: DoesAdminExist :one
SELECT EXISTS (SELECT 1
               FROM users u
                        JOIN team_user tu ON u.uuid = tu.user_id
               WHERE u.name = 'admin'
                 AND tu.role = 'admin') AS admin_exists
`

// Create admin user (for initial setup only)
func (q *Queries) DoesAdminExist(ctx context.Context) (bool, error) {
	row := q.db.QueryRow(ctx, doesAdminExist)
	var admin_exists bool
	err := row.Scan(&admin_exists)
	return admin_exists, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT uuid, name, email, created_at, updated_at
FROM users
WHERE id = (SELECT tokenable_id
            FROM personal_access_tokens
            WHERE token = $1)
`

type GetUserByIDRow struct {
	Uuid      string             `json:"uuid"`
	Name      pgtype.Text        `json:"name"`
	Email     pgtype.Text        `json:"email"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// Get users in the same team mapping as the logged-in user when provided another user's ID
func (q *Queries) GetUserByID(ctx context.Context, token string) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, token)
	var i GetUserByIDRow
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT u.id, u.name, u.email, u.created_at, u.updated_at, tu.role
FROM users u
         JOIN team_user tu ON u.id = tu.user_id
WHERE tu.team_id IN (SELECT team_id
                     FROM team_user
                     WHERE user_id = (SELECT tokenable_id
                                      FROM personal_access_tokens
                                      WHERE token = $1))
ORDER BY u.created_at DESC
LIMIT $2 OFFSET $3
`

type ListUsersParams struct {
	Token  string `json:"token"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type ListUsersRow struct {
	ID        int32              `json:"id"`
	Name      pgtype.Text        `json:"name"`
	Email     pgtype.Text        `json:"email"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	Role      UserRole           `json:"role"`
}

// List all users associated with the authorized user and get the total count
func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Token, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const retrieveUserWithTeamInfoByAPIKEY = `-- name: RetrieveUserWithTeamInfoByAPIKEY :one
SELECT u.uuid       AS user_uuid,
       u.name       AS username,
       u.email      AS user_email,
       u.created_at AS user_created_at,
       u.updated_at AS user_updated_at,
       t.uuid       AS team_uuid,
       t.name       AS team_name,
       t.created_at AS team_created_at,
       t.updated_at AS team_updated_at
FROM users u
         JOIN team_user tu ON u.id = tu.user_id
         JOIN teams t ON tu.team_id = t.id
WHERE u.id = (SELECT tokenable_id
              FROM personal_access_tokens
              WHERE token = $1)
`

type RetrieveUserWithTeamInfoByAPIKEYRow struct {
	UserUuid      string             `json:"user_uuid"`
	Username      pgtype.Text        `json:"username"`
	UserEmail     pgtype.Text        `json:"user_email"`
	UserCreatedAt pgtype.Timestamptz `json:"user_created_at"`
	UserUpdatedAt pgtype.Timestamptz `json:"user_updated_at"`
	TeamUuid      string             `json:"team_uuid"`
	TeamName      string             `json:"team_name"`
	TeamCreatedAt pgtype.Timestamptz `json:"team_created_at"`
	TeamUpdatedAt pgtype.Timestamptz `json:"team_updated_at"`
}

// Retrieve user with team info (used in API-KEY auth)
func (q *Queries) RetrieveUserWithTeamInfoByAPIKEY(ctx context.Context, token string) (RetrieveUserWithTeamInfoByAPIKEYRow, error) {
	row := q.db.QueryRow(ctx, retrieveUserWithTeamInfoByAPIKEY, token)
	var i RetrieveUserWithTeamInfoByAPIKEYRow
	err := row.Scan(
		&i.UserUuid,
		&i.Username,
		&i.UserEmail,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
		&i.TeamUuid,
		&i.TeamName,
		&i.TeamCreatedAt,
		&i.TeamUpdatedAt,
	)
	return i, err
}

const updateUserRole = `-- name: UpdateUserRole :exec
UPDATE team_user
SET role = $1
WHERE user_id = (SELECT tokenable_id
                 FROM personal_access_tokens
                 WHERE token = $2)
`

type UpdateUserRoleParams struct {
	Role  UserRole `json:"role"`
	Token string   `json:"token"`
}

// Update a user role
func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) error {
	_, err := q.db.Exec(ctx, updateUserRole, arg.Role, arg.Token)
	return err
}
