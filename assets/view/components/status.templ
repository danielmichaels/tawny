package components

import (
	"github.com/mudmap-io/backend-api"
	"github.com/mudmap-io/backend-api/assets/view/common"
	"strconv"
	"fmt"
)

templ StatusGatewayComponent(deviceID string) {
	<div class="overflow-hidden rounded-xl border border-gray-200 mb-5">
		<div class="flex items-center gap-x-4 border-b border-gray-900/5 bg-gray-50 p-6">
			<div class="text-sm font-medium leading-6 text-gray-900">Gateways</div>
		</div>
		<div hx-get={ fmt.Sprintf("/fragment/device/%s/status-gateway", deviceID) } hx-trigger={ fmt.Sprintf("load, every %ss", pollDuration("5")) } hx-swap="innerHTML">click</div>
	</div>
}

templ StatusInterfaceComponent(deviceID string) {
	<div class="overflow-hidden rounded-xl border border-gray-200 mb-5">
		<div class="flex items-center gap-x-4 border-b border-gray-900/5 bg-gray-50 p-6">
			<div class="text-sm font-medium leading-6 text-gray-900">Interfaces</div>
		</div>
		<div hx-get={ fmt.Sprintf("/fragment/device/%s/status-interface", deviceID) } hx-trigger={ fmt.Sprintf("load, every %ss", pollDuration("5")) } hx-swap="innerHTML">click</div>
	</div>
}

templ StatusDNS(data mudmap.SystemDNSResponse) {
	<dl class="-my-3 divide-y divide-gray-100 px-6 py-4 text-sm leading-6">
		<div class="flex justify-between gap-x-4 py-3">
			<dt class="text-gray-500">DNS Servers</dt>
			<ul>
				if data.Data != nil {
					for _, server := range data.Data.Dnsserver {
						<li class="text-sm text-gray-500">{ server }</li>
					}
				} else {
					<div class="text-sm text-gray-500">No DNS Servers Found</div>
				}
			</ul>
		</div>
	</dl>
}

templ StatusSystem(data mudmap.StatusSystemResponse) {
	<dl class="-my-3 divide-y divide-gray-100 px-6 py-4 text-sm leading-6">
		<div class="flex justify-between gap-x-4 py-3">
			<dt class="text-gray-500">Platform</dt>
			<div class="text-sm text-gray-500">{ data.Data.SystemPlatform }</div>
		</div>
		<div class="flex justify-between gap-x-4 py-3">
			<dt class="text-gray-500">Netgate ID</dt>
			<div class="text-sm text-gray-500">{ data.Data.SystemNetgateID }</div>
		</div>
		<div class="flex justify-between gap-x-4 py-3">
			<dt class="text-gray-500">CPU</dt>
			<div class="text-sm text-gray-500">{ data.Data.CPUModel }</div>
		</div>
		<div class="flex justify-between gap-x-4 py-3">
			<dt class="text-gray-500">CPU Count</dt>
			<div class="text-sm text-gray-500">{ strconv.Itoa(data.Data.CPUCount) }</div>
		</div>
		<div class="flex justify-between gap-x-4 py-3">
			<dt class="text-gray-500">Bios Vendor</dt>
			<div class="text-sm text-gray-500">{ data.Data.BiosVendor }</div>
		</div>
		<div class="flex justify-between gap-x-4 py-3">
			<dt class="text-gray-500">Bios Version</dt>
			<div class="text-sm text-gray-500">{ data.Data.BiosVersion }</div>
		</div>
		<div class="flex justify-between gap-x-4 py-3">
			<dt class="text-gray-500">Bios Date</dt>
			<div class="text-sm text-gray-500">{ data.Data.BiosDate }</div>
		</div>
		<div class="flex justify-between gap-x-4 py-3">
			<dt class="text-gray-500">MBUF Usage</dt>
			<div class="text-sm text-gray-500">{ strconv.Itoa(data.Data.MbufUsage) }%</div>
		</div>
		<div class="flex justify-between gap-x-4 py-3">
			<dt class="text-gray-500">Load Average</dt>
			<div class="justify-end text-sm text-gray-500">{ common.SystemLoadAvg(common.Float32ArrayToStringArray(data.Data.LoadAvg)) }</div>
		</div>
		<div class="flex justify-between gap-x-4 py-3">
			<dt class="text-gray-500">Memory Usage</dt>
			<div class="justify-end text-sm text-gray-500">{ common.ConvFloat32ToString(data.Data.MemUsage * 100) }%</div>
		</div>
	</dl>
}

templ StatusGateway(data mudmap.StatusGatewayResponse) {
	<table class="min-w-full divide-y divide-gray-200">
		<thead>
			<tr>
				<th class="bg-gray-50 px-6 py-3 text-sm text-left font-semibold text-gray-900" scope="col">Name</th>
				<th class="bg-gray-50 px-6 py-3 text-sm font-semibold text-gray-900" scope="col">IP</th>
				<th class="bg-gray-50 px-6 py-3 text-sm font-semibold text-gray-900" scope="col">RTT</th>
				<th class="bg-gray-50 px-6 py-3 text-sm font-semibold text-gray-900" scope="col">RTTSD</th>
				<th class="bg-gray-50 px-6 py-3 text-sm font-semibold text-gray-900" scope="col">Loss</th>
				<th class="hidden bg-gray-50 px-6 py-3 text-left text-sm font-semibold text-gray-900 md:block" scope="col">Status</th>
			</tr>
		</thead>
		<tbody class="divide-y divide-gray-200 bg-white">
			<tr class="bg-white">
				for _, v := range data.Data {
					<td class="w-full max-w-0 whitespace-nowrap px-6 py-4 text-sm text-gray-900">
						<div class="flex">
							<p class="truncate text-gray-500 group-hover:text-gray-900">{ v.Name }</p>
						</div>
					</td>
					<td class="whitespace-nowrap px-6 py-4 text-right text-sm text-gray-500">
						{ v.Monitorip }
					</td>
					<td class="whitespace-nowrap px-6 py-4 text-right text-sm text-gray-500">
						{ common.ConvFloat32ToString(v.Delay) }
					</td>
					<td class="whitespace-nowrap px-6 py-4 text-right text-sm text-gray-500">
						{ common.ConvFloat32ToString(v.Stddev) }
					</td>
					<td class="whitespace-nowrap px-6 py-4 text-right text-sm text-gray-500">
						{ strconv.Itoa(v.Loss) }
					</td>
					<td class="hidden whitespace-nowrap px-6 py-4 text-sm text-gray-500 md:block">
						if v.Status == "down" {
							<span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-red-100 text-red-800 capitalize">offline</span>
						} else {
							<span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-green-100 text-green-800 capitalize">online</span>
						}
					</td>
				}
			</tr>
		</tbody>
	</table>
}
