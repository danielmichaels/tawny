package components

import (
	"github.com/mudmap-io/backend-api"
	"fmt"
	"github.com/mudmap-io/backend-api/assets/view/common"
	"github.com/mudmap-io/backend-api/internal/pfsense"
	"golang.org/x/exp/slices"
)

templ StatusInterface(data mudmap.StatusInterfaceResponse) {
	<table class="min-w-full divide-y divide-gray-200">
		<thead>
			<tr>
				<th class="bg-gray-50 px-6 py-3 text-sm text-left font-semibold text-gray-900" scope="col">Name</th>
				<th class="bg-gray-50 px-6 py-3 text-sm font-semibold text-gray-900" scope="col">Status</th>
				<th class="bg-gray-50 px-6 py-3 text-sm font-semibold text-gray-900" scope="col">Media</th>
				<th class="bg-gray-50 px-6 py-3 text-sm font-semibold text-gray-900" scope="col">IPv4</th>
				<th class="bg-gray-50 px-6 py-3 text-sm font-semibold text-gray-900" scope="col">IPv6</th>
				<th class="hidden bg-gray-50 px-6 py-3 text-left text-sm font-semibold text-gray-900 md:block" scope="col">Enabled</th>
			</tr>
		</thead>
		<tbody class="divide-y divide-gray-200 bg-white">
			for _, v := range data.Data {
				<tr class="bg-white">
					<td class="w-full max-w-0 whitespace-nowrap px-6 py-4 text-sm text-gray-900">
						<div class="flex">
							<p class="truncate text-gray-500 group-hover:text-gray-900">{ v.Descr }</p>
						</div>
					</td>
					<td class="whitespace-nowrap px-6 py-4 text-right text-sm text-gray-500">
						{ v.Status }
					</td>
					<td class="whitespace-nowrap px-6 py-4 text-right text-sm text-gray-500">
						{ v.Media }
					</td>
					<td class="whitespace-nowrap px-6 py-4 text-right text-sm text-gray-500">
						{ v.Ipaddr }
					</td>
					<td class="whitespace-nowrap px-6 py-4 text-right text-sm text-gray-500">
						if v.Ipaddrv6 != "" {
							{ v.Ipaddrv6 }
						} else {
							N/A
						}
					</td>
					<td class="hidden whitespace-nowrap px-6 py-4 text-sm text-gray-500 md:block">
						if !v.Enable {
							<span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-red-100 text-red-800 capitalize">offline</span>
						} else {
							<span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-green-100 text-green-800 capitalize">online</span>
						}
					</td>
				</tr>
			}
		</tbody>
	</table>
}

templ InterfaceStatistics() {
	<h1>Interface Stats</h1>
}

templ InterfaceVLANs(deviceID string, data []mudmap.InterfaceVLANResponseNotPtr) {
	<table class="min-w-full divide-y divide-gray-200">
		<thead>
			<tr>
				<th class="bg-gray-50 px-6 py-3 text-sm font-semibold text-gray-900" scope="col">Interface</th>
				<th class="bg-gray-50 px-6 py-3 text-sm font-semibold text-gray-900" scope="col">VLAN Tag</th>
				<th class="bg-gray-50 px-6 py-3 text-sm font-semibold text-gray-900" scope="col">Priority</th>
				<th class="bg-gray-50 px-6 py-3 text-sm font-semibold text-gray-900" scope="col">Description</th>
				<th class="bg-gray-50 px-6 py-3 text-sm font-semibold text-gray-900" scope="col">Actions</th>
			</tr>
		</thead>
		<tbody class="divide-y divide-gray-200 bg-white">
			for i, v := range data {
				<tr class="bg-white">
					<td class="whitespace-nowrap px-6 py-4 text-center text-sm text-gray-500">
						{ v.If }
					</td>
					<td class="whitespace-nowrap px-6 py-4 text-center text-sm text-gray-500">
						{ v.Tag }
					</td>
					<td class="whitespace-nowrap px-6 py-4 text-center text-sm text-gray-500">
						{ v.Pcp }
					</td>
					<td class="whitespace-nowrap px-6 py-4 text-center text-sm text-gray-500">
						{ v.Description }
					</td>
					<td class="whitespace-nowrap px-6 py-4 text-center text-sm text-gray-500">
						<div class="flex space-x-2">
							<a
								href={ templ.SafeURL(fmt.Sprintf("/device/%s/interfaces/vlans/update?tag=%s", deviceID, data[i].Tag)) }
								class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-600"
							>Edit<span class="sr-only">, { v.Tag }</span></a>
							<a
								href={ templ.SafeURL(fmt.Sprintf("?id=%d", i)) }
								hx-confirm="This will permanently delete this resource. Continue?"
								hx-delete={ DeleteInterfaceVLAN(deviceID, i) }
								hx-swap="show:none"
								hx-target="closest tr"
								class="rounded-md bg-red-500 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-400"
							>Delete<span class="sr-only">, { v.Tag }</span></a>
						</div>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

func DeleteInterfaceVLAN(deviceID string, id int) string {
	// this won't work with pagination!
	return fmt.Sprintf("/fragment/device/%s/interface/vlan?id=%d", deviceID, id)
}

templ InterfaceBridge() {
	<h1>Interface VLANs</h1>
}

templ InterfaceGroups() {
	<h1>Interface VLANs</h1>
}

func parentInterfaceArray(ifaces []mudmap.InterfaceVLANResponseNotPtr) []string {
	var ifaceArr []string
	for _, v := range ifaces {
		ifaceArr = append(ifaceArr, v.If)
	}
	ifaceArr = slices.Compact(ifaceArr)
	return ifaceArr
}

templ InterfaceVLANForm(deviceID string, form pfsense.NewVLANForm, ifaces []mudmap.InterfaceVLANResponseNotPtr) {
	<form action={ templ.SafeURL(fmt.Sprintf("/device/%s/interfaces/vlans/update", deviceID)) } method="POST">
		<div class="sm:flex sm:items-center">
			<div class="sm:flex-auto">
				<h2 class="text-base font-semibold leading-6 text-gray-900">Add VLAN</h2>
				<p class="mt-2 text-sm text-gray-700">Enter VLAN details to add it to the device</p>
			</div>
		</div>
		<div class="mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
			<div class="col-span-full">
				@FormInput(*NewInputField("description",
					WithLabelText("Description"),
					WithFieldType("text"),
					WithValue(form.Description),
					WithRequired(true)))
			</div>
			<div class="sm:col-span-2 sm:col-start-1">
				@FormSelect(*NewInputField("parent_interface",
					WithLabelText("Parent interface"),
					WithValue(form.ParentInterface),
					WithInputClass("block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"),
					WithSelectOptions(parentInterfaceArray(ifaces)),
				))
			</div>
			<div class="sm:col-span-2">
				@FormInput(*NewInputField("priority",
					WithLabelText("Priority"),
					WithFieldType("number"),
					WithValue(common.Int64ToString(form.Priority)),
					WithDefaultValue("10"),
					WithInputClass("block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"),
					WithFormFieldErrors(form.WithFieldError("priority")),
				))
			</div>
			<div class="sm:col-span-2">
				@FormInput(*NewInputField("tag",
					WithLabelText("VLAN Tag"),
					WithFieldType("number"),
					WithValue(common.Int64ToString(form.Tag)),
					WithDefaultValue("100"),
					WithInputClass("block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"),
					WithFormFieldErrors(form.WithFieldError("tag")),
				))
			</div>
		</div>
		<div class="mt-6 flex items-center justify-end gap-x-6">
			<button type="submit" class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Save</button>
			<a href={ templ.SafeURL(fmt.Sprintf("/device/%s/interfaces/vlans", deviceID)) } type="button" class="rounded-md bg-red-500 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-400">Cancel</a>
		</div>
	</form>
}
