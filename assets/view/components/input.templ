package components

type InputField struct {
	Name           string
	LabelText      string
	LabelClass     string
	ID             string
	Required       bool
	Value          string
	Placeholder    string
	InputClass     string
	FieldType      string
	DefaultValue   string
	SelectOptions  []string
	FieldFormError string
}
type InputOption func(*InputField)

func WithLabelText(labelText string) InputOption {
	return func(p *InputField) {
		p.LabelText = labelText
	}
}

func WithLabelClass(labelClass string) InputOption {
	return func(p *InputField) {
		p.LabelClass = labelClass
	}
}

func WithID(id string) InputOption {
	return func(p *InputField) {
		p.ID = id
	}
}

func WithPlaceholder(placeholder string) InputOption {
	return func(p *InputField) {
		p.Placeholder = placeholder
	}
}

func WithInputClass(inputClass string) InputOption {
	return func(p *InputField) {
		p.InputClass = inputClass
	}
}
func WithDefaultValue(val string) InputOption {
	return func(p *InputField) {
		p.DefaultValue = val
	}
}

func WithFieldType(fieldType string) InputOption {
	return func(p *InputField) {
		p.FieldType = fieldType
	}
}
func WithSelectOptions(opts []string) InputOption {
	return func(p *InputField) {
		p.SelectOptions = opts
	}
}
func WithRequired(opts bool) InputOption {
	return func(p *InputField) {
		p.Required = opts
	}
}

func WithValue(opts string) InputOption {
	return func(p *InputField) {
		p.Value = opts
	}
}

func WithFormFieldErrors(opts string) InputOption {
	return func(p *InputField) {
		p.FieldFormError = opts
	}
}

func NewInputField(name string, options ...InputOption) *InputField {
	props := &InputField{
		Name:          name,
		LabelClass:    "block text-sm font-medium leading-6 text-gray-900",
		InputClass:    "block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6",
		ID:            name,
		FieldType:     "text",
		SelectOptions: nil,
		DefaultValue:  "",
		Required:      false,
	}

	for _, opt := range options {
		opt(props)
	}

	if len(props.FieldFormError) != 0 {
		props.InputClass = "block w-full rounded-md border-0 py-1.5 text-red-900 shadow-sm ring-1 ring-inset ring-red-300 placeholder:text-red-400 focus:ring-2 focus:ring-inset focus:ring-red-600 sm:text-sm sm:leading-6"
	}

	return props
}

templ FormInput(i InputField) {
	<label for={ i.Name } class={ i.LabelClass }>{ i.LabelText }</label>
	<input
		type={ i.FieldType }
		if i.Required {
			required
		}
		if i.Value == "" || i.Value == "0" {
			value={ i.DefaultValue }
		} else {
			value={ i.Value }
		}
		name={ i.Name }
		id={ i.ID }
		placeholder={ i.Placeholder }
		class={ i.InputClass }
	/>
	if len(i.FieldFormError) != 0 {
		<span class="flex items-center font-medium tracking-wide text-red-500 text-xs mt-1 ml-1">
			{ i.FieldFormError }
		</span>
	}
}

templ FormSelect(i InputField) {
	<label for={ i.Name } class={ i.LabelClass }>{ i.LabelText }</label>
	<select id={ i.ID } name={ i.Name } placeholder={ i.Placeholder } class={ i.InputClass }>
		for _, s := range i.SelectOptions {
			<option>{ s }</option>
		}
	</select>
}
